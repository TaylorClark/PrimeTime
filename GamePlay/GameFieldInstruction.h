//=================================================================================================
/*!
	\file GameFieldInstruction.h
	Game Play Library
	Game Field Instruction Base Class Header
	\author Taylor Clark
	\date September 24, 2007

	This header contains the definition for the game field instruction base class. Game field
	instruction classes that start with PII (player input instruction) represent instructions
	directly sent from a player. Instructions that start with GLI (game logic instructions)
	represent instructions generated by the field logic. Finally, instruction classes that start
	with RPI (replay instruction) are generated as the game field plays that allow rewind to be
	possible and are no persisted as they can be generated at run-time.
*/
//=================================================================================================

#pragma once
#ifndef __GameFieldInstruction_h
#define __GameFieldInstruction_h

#include "Base/Types.h"
#include "Base/Serializer.h"


/// The enum defining the possible instructions that can be processed by the game field
enum EGameFieldInstruction
{
	GFI_AddRow = 1,
	GFI_RemoveBlocks,
	GFI_SelectBlock,
	GFI_ClearSelection,
	GFI_SetPushSpeed,
	GFI_EndBlockFall,
	GFI_SetSum,
	GFI_AddSummands
};


//-------------------------------------------------------------------------------------------------
/*!
	\class GameFieldInstruction
	\brief The abstract base class for an instruction that can be executed by a game field

	This class defines a base class for all game field instruction classes.
*/
//-------------------------------------------------------------------------------------------------
class GameFieldInstruction
{
private:
	
	/// Allow the subclass to serialize its data
	virtual void SubclassSerialize( Serializer& serializer ) = 0;

public:

	float32 executionTime;

	/// The default constructor
	GameFieldInstruction() : executionTime( -1.0f )
	{}

	/// The destructor, virtual to ensure subclasses are cleaned up properly
	virtual ~GameFieldInstruction() {}

	/// Get the type of instruction this object represents
	virtual EGameFieldInstruction GetType() const = 0;

	/// Pack the instruction to a memory stream so that a game can be recored/replayed by storing
	/// the instructions that were processed during a game
	void Serialize( Serializer& serializer )
	{
		// Only serailize the instruction type ID of the instruction is being saved. When the
		// instruction is being loaded the type ID is read before this method is called.
		if( serializer.InWriteMode() )
		{
			// Write the instruction ID
			uint8 instuctionID = (uint8)GetType();
			serializer.AddData( instuctionID );
		}

		// Serialize the execution time
		serializer.AddData( executionTime );

		// Allow the subclass to write its data
		SubclassSerialize( serializer );
	}

	/// Create an instuction based on the type ID
	static GameFieldInstruction* CreateInstruction( EGameFieldInstruction instTypeID );
};

#endif